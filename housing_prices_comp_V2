{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10211,"databundleVersionId":111096,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"id":"a7dd2bcd-b981-4167-9cc5-ff9130de2782","cell_type":"markdown","source":"# Introduction to Notebook\n\nThis notebook is my introduction into Machine Learning as well as my ongoing project to generate a strong submission to the **Housing Prices Competition for Kaggle Learn Users** competition. \n\nThis current version includes filtering out columns that have NaN values from the training data, utilizing OneHotEncoder to encode non-numerical columns, as well as calculating feature importance to determine the best performing feature count for the RandomForestRegressor model. ","metadata":{}},{"id":"52d18001-cf00-483e-898c-6ad812fc21e0","cell_type":"markdown","source":"## Import libraries","metadata":{}},{"id":"1a43a4ff","cell_type":"code","source":"# Import necessary libraries\n\n#import os --- not needed in kaggle version\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:46.984684Z","iopub.execute_input":"2025-07-11T04:04:46.984997Z","iopub.status.idle":"2025-07-11T04:04:46.990879Z","shell.execute_reply.started":"2025-07-11T04:04:46.984972Z","shell.execute_reply":"2025-07-11T04:04:46.989883Z"}},"outputs":[],"execution_count":34},{"id":"93ac10d9","cell_type":"code","source":"# Set working directory and read in the data \n#PATH = os.getcwd()\n\n# Read in the training data\nhome_data = pd.read_csv(r\"/kaggle/input/home-data-for-ml-course/train.csv\")\n\n# Read in the test data\ntest_data = pd.read_csv(r\"/kaggle/input/home-data-for-ml-course/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:46.992239Z","iopub.execute_input":"2025-07-11T04:04:46.992620Z","iopub.status.idle":"2025-07-11T04:04:47.053593Z","shell.execute_reply.started":"2025-07-11T04:04:46.992592Z","shell.execute_reply":"2025-07-11T04:04:47.052766Z"}},"outputs":[],"execution_count":35},{"id":"80f06227","cell_type":"code","source":"# Get overview of data\n\n#print(home_data.columns)\n#home_data.describe()\n#print(home_data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.054619Z","iopub.execute_input":"2025-07-11T04:04:47.054871Z","iopub.status.idle":"2025-07-11T04:04:47.058642Z","shell.execute_reply.started":"2025-07-11T04:04:47.054852Z","shell.execute_reply":"2025-07-11T04:04:47.057812Z"}},"outputs":[],"execution_count":36},{"id":"fbf79374","cell_type":"code","source":"# V2 ----- # Create list of features that aren't missing values\nvalid_training_features = [col for col in home_data.columns if ( not home_data[col].isnull().any() )]\nvalid_test_features = [col for col in test_data.columns if ( not test_data[col].isnull().any() )]\n\nvalid_features = [feat for feat in valid_training_features if feat in valid_test_features]\nvalid_features.remove('Id')\n#valid_features = [col for col in home_data.columns if ( not home_data[col].isnull().any() )]\n\nnon_numerical_features = [col for col in valid_features if not ( home_data[col].dtype in ['int64', 'float64'] )]\n\nprint(valid_features)\nprint(non_numerical_features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.060453Z","iopub.execute_input":"2025-07-11T04:04:47.060685Z","iopub.status.idle":"2025-07-11T04:04:47.106390Z","shell.execute_reply.started":"2025-07-11T04:04:47.060668Z","shell.execute_reply":"2025-07-11T04:04:47.105354Z"}},"outputs":[{"name":"stdout","text":"['MSSubClass', 'LotArea', 'Street', 'LotShape', 'LandContour', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'ExterQual', 'ExterCond', 'Foundation', 'Heating', 'HeatingQC', 'CentralAir', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleCondition']\n['Street', 'LotShape', 'LandContour', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'ExterQual', 'ExterCond', 'Foundation', 'Heating', 'HeatingQC', 'CentralAir', 'PavedDrive', 'SaleCondition']\n","output_type":"stream"}],"execution_count":37},{"id":"ad28d589","cell_type":"code","source":"# V2 ----- # Create column transformer to encode only the non-numerical features\ncolumn_transformer = ColumnTransformer(\n    transformers=[\n        ('onehot', OneHotEncoder(handle_unknown='ignore'), non_numerical_features)\n    ],\n    remainder='passthrough'  # Keep all other (numerical) columns as-is\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.107456Z","iopub.execute_input":"2025-07-11T04:04:47.107767Z","iopub.status.idle":"2025-07-11T04:04:47.117087Z","shell.execute_reply.started":"2025-07-11T04:04:47.107737Z","shell.execute_reply":"2025-07-11T04:04:47.116256Z"}},"outputs":[],"execution_count":38},{"id":"0407229d","cell_type":"code","source":"# # V1 ----- # Set target and features data for model\n# target = home_data.SalePrice\n\n# features = ['LotArea', 'Street', 'YearBuilt', '1stFlrSF', '2ndFlrSF', \n#            'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\n\n# feature_data = home_data[features]\n\n# print(feature_data.describe())\n# print(feature_data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.118069Z","iopub.execute_input":"2025-07-11T04:04:47.118453Z","iopub.status.idle":"2025-07-11T04:04:47.135078Z","shell.execute_reply.started":"2025-07-11T04:04:47.118411Z","shell.execute_reply":"2025-07-11T04:04:47.134336Z"}},"outputs":[],"execution_count":39},{"id":"65b4ac49","cell_type":"code","source":"#V2 ----- # Set target and features data for model\ntarget = home_data.SalePrice\n\n# Features used for second model based on columns that are not missing values and analysis \n# of data_description.txt at https://www.kaggle.com/competitions/home-data-for-ml-course/data\nfeatures = valid_features\n\nfeature_data = home_data[features]\n\n#print(feature_data.describe())\n#print(feature_data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.136010Z","iopub.execute_input":"2025-07-11T04:04:47.136257Z","iopub.status.idle":"2025-07-11T04:04:47.156565Z","shell.execute_reply.started":"2025-07-11T04:04:47.136213Z","shell.execute_reply":"2025-07-11T04:04:47.155508Z"}},"outputs":[],"execution_count":40},{"id":"582ad432","cell_type":"code","source":"# Set the train and test data\ntrain_X, val_X, train_y, val_y = train_test_split(feature_data, target, random_state=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.157521Z","iopub.execute_input":"2025-07-11T04:04:47.157806Z","iopub.status.idle":"2025-07-11T04:04:47.177192Z","shell.execute_reply.started":"2025-07-11T04:04:47.157766Z","shell.execute_reply":"2025-07-11T04:04:47.176270Z"}},"outputs":[],"execution_count":41},{"id":"109d6112","cell_type":"code","source":"# V2 ----- # Encode non numerical features\n\ntrain_X_encoded = column_transformer.fit_transform(train_X)\nval_X_encoded = column_transformer.transform(val_X)\nfeature_data_encoded = column_transformer.transform(feature_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.178270Z","iopub.execute_input":"2025-07-11T04:04:47.178642Z","iopub.status.idle":"2025-07-11T04:04:47.224697Z","shell.execute_reply.started":"2025-07-11T04:04:47.178611Z","shell.execute_reply":"2025-07-11T04:04:47.223886Z"}},"outputs":[],"execution_count":42},{"id":"ea7fbf67","cell_type":"code","source":"# V2 ----- # Specify and fit model for training data and validation data\n\nmodel = DecisionTreeRegressor(random_state=1)\nmodel.fit(train_X_encoded, train_y)\n\nval_predictions = model.predict(val_X_encoded)\n#print(mean_absolute_error(val_y, val_predictions))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.232955Z","iopub.execute_input":"2025-07-11T04:04:47.233269Z","iopub.status.idle":"2025-07-11T04:04:47.277184Z","shell.execute_reply.started":"2025-07-11T04:04:47.233238Z","shell.execute_reply":"2025-07-11T04:04:47.276356Z"}},"outputs":[],"execution_count":44},{"id":"3ceaa8ae","cell_type":"code","source":"# Check first 5 predictions to their actual values\n\nprint(val_predictions[:5])\nprint(val_y.tolist()[:5])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.277978Z","iopub.execute_input":"2025-07-11T04:04:47.278285Z","iopub.status.idle":"2025-07-11T04:04:47.283306Z","shell.execute_reply.started":"2025-07-11T04:04:47.278257Z","shell.execute_reply":"2025-07-11T04:04:47.282376Z"}},"outputs":[{"name":"stdout","text":"[208500. 169500. 125500.  81000. 128950.]\n[231500, 179500, 122000, 84500, 142000]\n","output_type":"stream"}],"execution_count":45},{"id":"0802ba1b","cell_type":"code","source":"# Find MAE of predictions\n\nprint(mean_absolute_error(val_y, val_predictions))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.284290Z","iopub.execute_input":"2025-07-11T04:04:47.284567Z","iopub.status.idle":"2025-07-11T04:04:47.299424Z","shell.execute_reply.started":"2025-07-11T04:04:47.284539Z","shell.execute_reply":"2025-07-11T04:04:47.298513Z"}},"outputs":[{"name":"stdout","text":"24232.975342465754\n","output_type":"stream"}],"execution_count":46},{"id":"ec36cdf2","cell_type":"code","source":"# V2 ----- # Function to determine the most accurate complexity of the datatree\n\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=1)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n\nideal_tree = ()\nfor max_leaf_nodes in [5, 25, 50, 100, 250, 500, 1000]:\n    current_mae = get_mae(max_leaf_nodes, train_X_encoded, val_X_encoded, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, current_mae))\n    if not ideal_tree or current_mae < ideal_tree[1]:\n        ideal_tree = (max_leaf_nodes, current_mae)\n\nideal_tree_size = ideal_tree[0]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.300244Z","iopub.execute_input":"2025-07-11T04:04:47.300623Z","iopub.status.idle":"2025-07-11T04:04:47.431490Z","shell.execute_reply.started":"2025-07-11T04:04:47.300595Z","shell.execute_reply":"2025-07-11T04:04:47.430576Z"}},"outputs":[{"name":"stdout","text":"Max leaf nodes: 5  \t\t Mean Absolute Error:  31248\nMax leaf nodes: 25  \t\t Mean Absolute Error:  24312\nMax leaf nodes: 50  \t\t Mean Absolute Error:  23700\nMax leaf nodes: 100  \t\t Mean Absolute Error:  22663\nMax leaf nodes: 250  \t\t Mean Absolute Error:  22746\nMax leaf nodes: 500  \t\t Mean Absolute Error:  23613\nMax leaf nodes: 1000  \t\t Mean Absolute Error:  23652\n","output_type":"stream"}],"execution_count":47},{"id":"958a0574","cell_type":"code","source":"# V2 -----# Generate final model using DecisionTreeRegressor\n\nfinal_model = DecisionTreeRegressor(max_leaf_nodes=ideal_tree_size, random_state=1)\nfinal_model.fit(feature_data_encoded, target)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.432319Z","iopub.execute_input":"2025-07-11T04:04:47.432603Z","iopub.status.idle":"2025-07-11T04:04:47.460097Z","shell.execute_reply.started":"2025-07-11T04:04:47.432583Z","shell.execute_reply":"2025-07-11T04:04:47.459294Z"}},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"DecisionTreeRegressor(max_leaf_nodes=100, random_state=1)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(max_leaf_nodes=100, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(max_leaf_nodes=100, random_state=1)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":48},{"id":"25f4c3db","cell_type":"code","source":"# V2 ----- # Use RandomForestRegressor to compare to DecisionTreeRegressor\n\n# Define the model. Set random_state to 1\nrf_model = RandomForestRegressor(random_state=1)\n\n# fit your model\nrf_model.fit(train_X_encoded, train_y)\n\n# Calculate the mean absolute error of your Random Forest model on the validation data\nrf_val_predictions = rf_model.predict(val_X_encoded)\nrf_val_mae = mean_absolute_error(rf_val_predictions, val_y)\n\nprint(\"Validation MAE for Random Forest Model: {}\".format(rf_val_mae))\nprint(\"Validation MAE for Decision Tree Model: {}\".format(ideal_tree[1]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:47.461286Z","iopub.execute_input":"2025-07-11T04:04:47.461747Z","iopub.status.idle":"2025-07-11T04:04:48.914287Z","shell.execute_reply.started":"2025-07-11T04:04:47.461720Z","shell.execute_reply":"2025-07-11T04:04:48.913524Z"}},"outputs":[{"name":"stdout","text":"Validation MAE for Random Forest Model: 17416.73694520548\nValidation MAE for Decision Tree Model: 22663.56382776169\n","output_type":"stream"}],"execution_count":49},{"id":"dfe0f878","cell_type":"code","source":"# Determine importance of features then determine best performing feature count\n# Set feature data, then retrain model\n\nimportances = rf_model.feature_importances_\nsorted_indices = np.argsort(importances)[::-1]\n\n# best_k set based on previous run to reduce time taken to rerun notebook\n# uncomment section below to rerun best_k analysis\n\n# Previous results\n# Best MAE: 17214.8495 using top 122 features\n\nbest_k = 122\n\n##############################\n\n# # Try models using top N features, record MAE\n# results = []\n\n# for k in range(1, len(sorted_indices) + 1):\n#     selected_indices = sorted_indices[:k]\n    \n#     X_train_sub = train_X_encoded[:, selected_indices]\n#     X_test_sub = val_X_encoded[:, selected_indices]\n    \n#     model = RandomForestRegressor(random_state=1)\n#     model.fit(X_train_sub, train_y)\n#     y_pred = model.predict(X_test_sub)\n    \n#     mae = mean_absolute_error(val_y, y_pred)\n#     results.append((k, mae))\n\n#     print(f\"Top {k} features: MAE = {mae:.4f}\")\n\n# # Find best performing feature count\n# best_k, best_mae = min(results, key=lambda x: x[1])\n# print(f\"\\n Best MAE: {best_mae:.4f} using top {best_k} features\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:48.914991Z","iopub.execute_input":"2025-07-11T04:04:48.915189Z","iopub.status.idle":"2025-07-11T04:04:48.927252Z","shell.execute_reply.started":"2025-07-11T04:04:48.915173Z","shell.execute_reply":"2025-07-11T04:04:48.926300Z"}},"outputs":[],"execution_count":50},{"id":"c43d4434","cell_type":"code","source":"# V2 ----- # Generate final model using RandomForestRegressor\n\nfinal_rf_model = RandomForestRegressor(random_state=1)\n#final_rf_model.fit(feature_data_encoded, target)\nfinal_rf_model.fit(feature_data_encoded[:, sorted_indices[:best_k]], target)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:48.928162Z","iopub.execute_input":"2025-07-11T04:04:48.928496Z","iopub.status.idle":"2025-07-11T04:04:50.807253Z","shell.execute_reply.started":"2025-07-11T04:04:48.928467Z","shell.execute_reply":"2025-07-11T04:04:50.806414Z"}},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"RandomForestRegressor(random_state=1)","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=1)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":51},{"id":"fa714624","cell_type":"code","source":"# V2 ----- # Make predictions of test data\n\ntest_features = test_data[features]\ntest_features_encoded = column_transformer.transform(test_features)\n\ntest_predictions = final_rf_model.predict(test_features_encoded[:, sorted_indices[:best_k]])\n\noutput = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_predictions})\noutput.to_csv('submission_V2.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:50.808099Z","iopub.execute_input":"2025-07-11T04:04:50.808362Z","iopub.status.idle":"2025-07-11T04:04:50.869345Z","shell.execute_reply.started":"2025-07-11T04:04:50.808340Z","shell.execute_reply":"2025-07-11T04:04:50.868625Z"}},"outputs":[],"execution_count":52},{"id":"46f20cdd","cell_type":"code","source":"print(output.head())\n#output.describe()\nprint(test_data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T04:04:50.870165Z","iopub.execute_input":"2025-07-11T04:04:50.870546Z","iopub.status.idle":"2025-07-11T04:04:50.883038Z","shell.execute_reply.started":"2025-07-11T04:04:50.870518Z","shell.execute_reply":"2025-07-11T04:04:50.882287Z"}},"outputs":[{"name":"stdout","text":"     Id  SalePrice\n0  1461  125146.41\n1  1462  152197.50\n2  1463  170480.09\n3  1464  184024.00\n4  1465  195675.56\n     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n\n  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n\n  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n0       0      6    2010        WD         Normal  \n1   12500      6    2010        WD         Normal  \n2       0      3    2010        WD         Normal  \n3       0      6    2010        WD         Normal  \n4       0      1    2010        WD         Normal  \n\n[5 rows x 80 columns]\n","output_type":"stream"}],"execution_count":53}]}